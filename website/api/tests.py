import json

from rest_framework.test import APITestCase

from .models import ValidationRequest
from .cron import process_requests


class ValidationRequests(APITestCase):

    def test_create(self):
        response = self.client.post("/api/create_request", {"name": "Tomas", "surname": "Capek", "data": "abcd"},
                                    format="json")

        self.assertEqual(response.status_code, 201)

        created_id = json.loads(response.content)["id"]

        created_object = ValidationRequest.objects.get(pk=created_id)

        self.assertEqual(created_object.name, "Tomas")
        self.assertEqual(created_object.surname, "Capek")
        self.assertEqual(created_object.data, "abcd")
        self.assertEqual(created_object.status, ValidationRequest.Status.PENDING)

    def test_valid(self):
        response = self.client.post("/api/create_request", {"name": "a", "surname": "b",
                                                            "data": "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"},
                                    format="json")

        self.assertEqual(response.status_code, 201)

        process_requests()

        created_id = json.loads(response.content)["id"]

        created_object = ValidationRequest.objects.get(pk=created_id)

        self.assertEqual(created_object.status, ValidationRequest.Status.VALID)

    def test_invalid(self):
        response = self.client.post("/api/create_request", {"name": "a", "surname": "b",
                                                            "data": "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"},
                                    format="json")

        self.assertEqual(response.status_code, 201)

        process_requests()

        created_id = json.loads(response.content)["id"]

        created_object = ValidationRequest.objects.get(pk=created_id)

        self.assertEqual(created_object.status, ValidationRequest.Status.EXPIRED)

    def test_fraud(self):
        response = self.client.post("/api/create_request", {"name": "a", "surname": "b",
                                                            "data": "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"}
                                    , format="json")

        self.assertEqual(response.status_code, 201)

        process_requests()

        created_id = json.loads(response.content)["id"]

        created_object = ValidationRequest.objects.get(pk=created_id)

        self.assertEqual(created_object.status, ValidationRequest.Status.FRAUD)
